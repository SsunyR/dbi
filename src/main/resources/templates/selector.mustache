<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Discord Bot Initializr</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
    <style>
        .file-item-transition {
            transition: all 0.2s ease-in-out;
        }

        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .checkbox-custom {
            @apply w-5 h-5 text-green-600 border-gray-300 rounded
            focus:ring-green-500 cursor-pointer transition-all duration-200;
        }

        .button-primary {
            @apply bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-6
            rounded-lg transition duration-200 ease-in-out transform hover:-translate-y-1
            focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50
            disabled:bg-gray-400 disabled:cursor-not-allowed disabled:transform-none;
        }
    </style>
</head>
<body class="bg-gray-50">
<div class="container mx-auto px-4 py-8 max-w-3xl">
    <header class="text-center mb-8">
        <h1 class="text-3xl font-bold text-gray-800 mb-4">Discord Bot Initializr</h1>
        <p class="text-gray-600">Select the features you want to include in your Discord bot</p>
    </header>

    <main>
        <div class="bg-white rounded-xl shadow-md p-6 mb-6">
            <div class="space-y-2">
                {{#cogsFileNames}}
                    <div class="file-item-transition hover:bg-gray-50 p-4 rounded-lg">
                        <div class="flex items-center space-x-4">
                            <label class="flex items-center space-x-3 cursor-pointer w-full">
                                <input type="checkbox"
                                       class="checkbox-custom"
                                       id="{{.}}"
                                       name="cogsFiles"
                                       value="{{.}}">
                                <div class="flex flex-col flex-grow">
                                    <span class="text-gray-800 font-medium">{{.}}</span>
                                    <span class="text-sm text-gray-500">Python module for {{.}}</span>
                                </div>
                            </label>
                        </div>
                    </div>
                {{/cogsFileNames}}
            </div>
        </div>

        <div class="flex flex-col items-center space-y-4">
            <button id="processButton"
                    class="button-primary flex items-center justify-center min-w-[200px]"
                    onclick="processSelectedFiles()">
                <span>Process and Download</span>
                <span id="loadingSpinner" class="loading-spinner ml-2 hidden"></span>
            </button>

            <div id="errorMessage"
                 class="hidden w-full p-4 rounded-lg bg-red-50 text-red-700 border border-red-200"
                 role="alert">
            </div>
        </div>
    </main>
</div>

<script>
    async function processSelectedFiles() {
        const button = document.getElementById('processButton');
        const spinner = document.getElementById('loadingSpinner');
        const errorMessage = document.getElementById('errorMessage');

        // Get selected files
        const selectedFiles = Array.from(document.querySelectorAll('input[name="cogsFiles"]:checked'))
                .map(checkbox => checkbox.value);

        if (selectedFiles.length === 0) {
            showError('Please select at least one cogs file');
            return;
        }

        try {
            // Disable button and show loading state
            button.disabled = true;
            spinner.classList.remove('hidden');
            errorMessage.classList.add('hidden');

            const response = await fetch('/download', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ selectedFiles })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to process files');
            }

            // Create a blob from the response and trigger download
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'BotLauncher.zip';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            showError(error.message);
        } finally {
            // Reset button state
            button.disabled = false;
            spinner.classList.add('hidden');
        }
    }

    function showError(message) {
        const errorElement = document.getElementById('errorMessage');
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
        setTimeout(() => {
            errorElement.classList.add('hidden');
        }, 5000);
    }

    // Add keyboard support for checkboxes
    document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
        checkbox.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                checkbox.checked = !checkbox.checked;
            }
        });
    });
</script>
</body>
</html>